name: Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PASSWORD }}

      - name: Build and push image
        run: |
          IMAGE="ghcr.io/${{ secrets.GHCR_USERNAME }}"
          APP_NAME="bandicute-server"
          TAG="latest"
          
          docker build -t $IMAGE/$APP_NAME:$TAG .
          docker push $IMAGE/$APP_NAME:$TAG

      - name: Deploy
        run: |
          sudo apt-get update
          sudo apt-get install -y curl netcat openssh-client
          curl -L "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64" \
            -o /usr/local/bin/cloudflared
          chmod +x /usr/local/bin/cloudflared
          
          nohup cloudflared access tcp \
            --hostname "${{ secrets.SSH_HOST }}" \
            --url "127.0.0.1:2222" \
            --service-token-id "${{ secrets.CLOUDFLARE_TOKEN_ID }}" \
            --service-token-secret "${{ secrets.CLOUDFLARE_TOKEN_SECRET }}" \
            >/tmp/cloudflared.log 2>&1 &
          
          for i in {1..20}; do
            if nc -z 127.0.0.1 2222; then
              echo "Connect!"
              break
            fi
            echo "Waiting for tunnel... ($i/20)"
            sleep 1
          done

          echo "${{ secrets.SERVER_SSH_KEY }}" > /tmp/server_key
          chmod 600 /tmp/server_key

          ssh -o StrictHostKeyChecking=no \
          -i /tmp/server_key \
          -p 2222 \
          ${{ secrets.SERVER_USERNAME }}@127.0.0.1 \
          "docker login ghcr.io -u '${{ secrets.GHCR_USERNAME }}' -p '${{ secrets.GHCR_PASSWORD }}' && \
           docker pull ghcr.io/${{ secrets.GHCR_USERNAME }}/bandicute-server:latest && \
           
           docker stop bandicute-server || true && \
           docker rm bandicute-server || true && \
           
           docker run -d \
             --name bandicute-server \
             -p ${{ secrets.APPLICATION_PORT }}:8080 \
             -e SOPS_PRIVATE_KEY='${{ secrets.SOPS_PRIVATE_KEY }}' \
             ghcr.io/${{ secrets.GHCR_USERNAME }}/bandicute-server:latest"
